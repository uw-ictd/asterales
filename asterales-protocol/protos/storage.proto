syntax = "proto3";
package asterales.storage;

// An Entity stores information about an entity active in the network.
//
// Entities may come in several types with specific subfields per type.
message Entity {
    // The numerical id of the entity. This id must be unique across all
    // communities and users.
    // TODO(matt9j) The address may map directly to the ID so this field may not
    // be needed.
    int64 id = 1;

    // The ed25519 public verification key corresponding to the entity's held
    // private key. This key validates transactions involving this community.
    bytes verify_key = 2;

    // The entity's current balance.
    int64 balance = 3;

    // The greatest sequence number currently incorporated into the entity's
    // balance.
    uint64 frontier_sequence_number = 4;

    oneof entity_subtype {
        CommunityServer server = 6;
        User user = 7;
    }
}

// CommunityServer stores the public information required to represent a
// community in the network.
message CommunityServer {
    // A utf8 encoded display name of the community.
    string display_name = 16;
}

// User stores the public information required to represent a mobile user of the
// network.
message User {
    // The numerical id of this user's home community.
    int64 home_community_id = 1;

    // A utf8 encoded display name of the user.
    string display_name = 16;
}

// Exchange represents a single CRDT entry with metadata to support eventual
// garbage collection. It is similar to the asterales.Exchange message, except
// compressed into a single message once wrapping signatures have been
// validated.
message ExchangeRecord {
    // The numerical id of the sending party and receiving party. These must be
    // valid communities or users.
    int64 sender_id = 1;
    // The numerical id of the receiving party. This must be a valid community
    // or user.
    int64 receiver_id = 2;

    // The sequence numbers assigned to this exchange by the sender and receiver.
    //
    // Note: These sequence numbers are not permitted to roll over.
    uint64 receiver_sequence_number_lsb = 3;
    uint64 receiver_sequence_number_msb = 4;

    // The amount of the transaction.
    //
    // Note: Negative amounts are explicitly supported, but may break incentive
    // compatibility of the signing order.
    // TODO(matt9j) Handle fractional currency amounts.
    int64 amount = 5;

    // The currency of the transaction.
    // TODO(matt9j) Support multiple currencies.
    storage.Currency currency = 6;

    // The previous_valid_sequence_number issued by the receiver.
    //
    // The previous valid sequence number must be a valid CRDT record. It
    // can be used to identify holes in the sequence number series.
    //
    // Note: The sequence number may not roll over.
    uint64 receiver_previous_valid_sequence_number_lsb = 7;
    uint64 receiver_previous_valid_sequence_number_msb = 8;
}

// The currency represented in any given transaction.
enum Currency {
    UNKNOWN = 0;
    NETWORK = 1;
    USD = 2;
}

